/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 08.07.2022 02:26:18

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 7456;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[17];
TfLiteEvalTensor tflEvalTensors[17];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[8];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,650 } };
const TfArray<1, float> quant0_scale = { 1, { 0.043461676687002182, } };
const TfArray<1, int> quant0_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 832, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 50, 13, 1, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[8] = { -9629, -5889, -6005, -7804, -12583, -2324, -4993, -4349, };
const TfArray<1, int> tensor_dimension3 = { 1, { 8 } };
const TfArray<8, float> quant3_scale = { 8, { 6.9232883106451482e-05, 7.9057048424147069e-05, 7.3815659561660141e-05, 5.108831828692928e-05, 6.8787878262810409e-05, 6.2567174609284848e-05, 9.6506984846200794e-05, 0.00012655153113882989, } };
const TfArray<8, int> quant3_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[16] = { -866, -4635, 1057, 21, -20778, -9371, -1126, -6089, -7401, -4691, -1046, -10818, -3607, 625, 432, -3915, };
const TfArray<1, int> tensor_dimension4 = { 1, { 16 } };
const TfArray<16, float> quant4_scale = { 16, { 8.8373242761008441e-05, 8.2540078437887132e-05, 7.9673867730889469e-05, 8.1035141192842275e-05, 5.0294329412281513e-05, 9.6752417448442429e-05, 9.3287686468102038e-05, 7.087819540174678e-05, 8.7730324594303966e-05, 8.0251869803760201e-05, 7.176379585871473e-05, 7.607880252180621e-05, 9.9774260888807476e-05, 8.911566692404449e-05, 7.9446464951615781e-05, 6.9748144596815109e-05, } };
const TfArray<16, int> quant4_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int32_t tensor_data5[4] = { 4092, -7019, -1384, 2604, };
const TfArray<1, int> tensor_dimension5 = { 1, { 4 } };
const TfArray<1, float> quant5_scale = { 1, { 0.00025312879006378353, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[4*832] = { 
  20, 12, 17, -16, -9, 13, -9, 31, -12, -3, 8, 6, 0, -9, 15, 7, 11, 12, -13, 3, -12, 2, 17, 1, 7, 13, 16, 7, 12, 7, -16, 17, 2, 0, 10, 0, -6, -13, 25, 10, 2, -1, 9, 16, -5, -5, -11, 16, 40, 28, 5, 31, 11, 10, 24, 13, 33, -14, 10, 3, 30, 13, -34, 21, -6, -4, -4, 4, 4, -2, 7, 3, -23, 3, 22, 12, -7, -13, 11, 0, 29, 6, -20, 1, -7, -5, 17, 5, -3, -10, -7, -6, 12, 1, -8, 13, 2, 22, 9, 6, -7, 10, -7, -10, 12, 4, -12, 19, -16, -4, -5, 9, -21, -11, 10, -4, -32, -11, -10, -26, -66, -16, 2, 3, -5, -9, -18, -11, -3, -53, -21, 3, 22, -59, -16, 5, -61, -3, 23, 40, 8, -16, 3, 10, 17, 2, 15, -6, -31, -24, 24, -4, -21, -29, 18, -9, -12, -1, 4, 14, 4, 11, -1, 4, -10, -56, 29, -20, 17, -1, 1, -11, -2, -4, -7, 8, -14, -19, -16, 17, -32, -49, 2, -32, 33, -13, -24, 6, -2, 8, 9, 24, -11, -43, -23, 1, 20, -35, -39, 13, -20, 11, 21, 11, 5, -34, 13, 10, -14, -2, -21, 2, -36, -13, -14, -2, 12, -29, -2, -37, 10, -21, 19, -2, -8, -4, -3, 8, -15, -22, 47, -11, 17, 8, -18, -16, 0, -22, 7, 0, 9, -12, -18, -9, -39, -51, -35, -39, 13, -40, -34, -11, -26, 4, 5, 2, -17, -61, -21, 22, 14, -25, -27, -1, -25, 14, 27, 25, 21, -41, 8, 4, 5, 25, -11, 5, -41, 4, -8, -2, 16, -22, -38, -20, -20, 25, 8, -7, -2, 42, 5, 3, -1, -26, -20, -25, -1, -14, -6, -12, -10, -10, -9, -2, 3, 52, -28, 45, -42, 26, -22, -17, 35, 8, -9, 6, 1, 5, -27, 8, -28, -79, -25, 19, 11, -36, -12, 0, -48, 0, 20, 9, -5, -16, 14, 10, 19, 7, -3, -7, -53, -3, -6, 6, -18, -11, -2, -25, -10, -17, 19, -10, -3, 10, 2, -6, 7, -38, -25, -47, -40, 7, -16, -5, -6, -14, -2, -12, -13, -16, -16, 14, -43, 15, 21, -24, -11, 42, 8, 2, -17, -17, 21, -10, -21, -71, -5, 8, 11, -34, -24, 9, -35, 3, 25, 4, 4, 7, 6, 1, 3, 21, -3, -9, -44, -2, 18, 11, 4, 6, -4, -18, -19, -9, 4, -3, -7, 24, 17, 3, -14, -19, -13, -55, 34, -13, -4, 2, -12, 2, -1, -9, 0, 18, -22, -28, -20, -11, -13, -43, 11, 24, 13, 49, -16, 3, 13, -19, 10, -31, 7, 15, -5, -43, -2, 1, -16, 7, 18, 15, -9, 2, 4, 2, -3, 5, -8, 7, -47, 4, 33, 6, 7, -4, -10, -17, 21, -11, -15, 10, 28, 1, 9, -3, 7, -15, 16, -1, -79, -5, -7, -9, 12, -5, 20, -2, 6, 10, 15, 26, -25, 50, 2, 17, -3, -8, -2, 52, -10, 2, 13, 20, 14, -24, -5, 14, 7, -6, -5, -3, -26, 4, -2, 6, 23, -23, 9, 10, -5, -10, -9, 14, -26, 1, -18, 3, 11, 14, -11, -11, 4, -19, -15, -5, 7, -2, 21, -7, -5, -24, 21, -6, -41, -2, 5, -3, -1, 5, 15, 6, 12, 57, 15, -39, -1, 71, 1, 33, 41, 26, -17, -11, -5, -3, 3, -1, 13, -20, -13, -3, 4, -18, -7, -5, -23, -7, 5, -4, -3, -4, 0, 14, 3, 8, -4, 10, -12, -5, -10, 1, 19, -5, -4, -6, -2, -18, 6, 8, 5, 32, 1, 1, 3, -4, -22, 7, -13, 0, -14, 2, 9, -11, -3, 5, 3, -10, 5, 1, 2, -8, -11, -14, -24, 7, 10, 16, 2, -6, 6, -12, 21, -9, 11, -4, -7, -2, -1, 16, -26, -10, 16, -9, 8, 3, 13, 6, 3, -12, -18, -2, -26, -5, 11, 9, 6, 6, 0, -4, 5, -27, -7, 7, 6, 13, 3, 10, 4, 1, 12, -7, 10, -9, -15, -4, 15, 4, 0, 13, 24, -23, -4, -3, 15, -1, -12, -16, -11, 9, -15, 5, 12, 5, -9, -2, 30, -16, 2, -16, -9, -20, 14, 12, -33, 2, 20, 9, 15, -2, 22, 2, -7, 5, -5, 6, -24, -3, -30, 2, -25, -11, 12, 4, 10, -11, -2, 10, 9, 9, -9, -3, -11, -10, -15, -9, -9, -12, -2, -4, 0, 0, -27, -4, -1, 36, -38, 5, 9, 28, -19, -11, 24, 30, 21, 13, 21, 14, -5, -22, -1, 6, 13, -8, 3, -23, 58, 17, -19, -12, 38, 27, -1, 3, 17, -3, 19, -1, -7, 28, -10, 24, -6, 12, -2, 1, 25, -28, 12, -19, 16, 16, 16, 8, -3, -1, 9, 7, 8, -13, -27, 2, 1, 20, 1, 8, 7, 5, 9, -18, -13, 12, 1, -37, 17, 9, -10, -16, 62, 22, 16, 6, -50, 7, 
  -3, -4, 6, -30, 12, 16, -22, 1, -3, -15, -12, 10, -8, 35, -37, -30, -26, 15, 29, -2, 36, 8, 15, 1, 32, -2, -28, -13, 22, -24, 4, -2, 7, -8, -1, -10, 3, 12, 17, 2, -5, 11, 19, -9, -6, 6, 23, -3, 25, -6, -20, -39, -59, -34, 40, -39, -66, -49, -11, -7, -48, -39, 26, 11, 27, 14, 27, -38, 7, 7, -37, 14, 4, 11, 31, 33, 23, -3, -64, -33, -30, 34, 41, -6, 25, 5, 22, 1, 30, 7, -22, 4, -20, -19, -21, -17, 4, 9, -1, 2, 6, -8, -7, 9, 3, 0, 14, -10, 18, 11, 25, -27, 17, 25, 18, -18, 24, 30, 19, 33, 70, -42, 8, -63, 16, -17, 37, -12, 22, 20, 23, -38, 0, 14, -19, 21, 11, 12, 21, 19, -3, -14, -30, -23, -44, -7, 40, -17, 21, 10, 2, -5, 10, -2, -8, 1, -32, -12, -16, -13, 48, 16, 2, 0, -4, -9, -30, -13, 16, 24, 14, 24, 38, -28, 13, -25, 11, 45, 7, -5, 64, -1, -26, 29, -35, -20, 38, -19, 14, 0, -4, 29, -9, 23, 9, -4, 5, 18, -18, 23, 10, 12, 6, 20, -12, -16, -28, -23, -35, -13, 33, 12, 25, 15, -9, -18, 42, 1, -11, 12, -14, 4, -15, 4, -11, -35, -3, -12, 1, 22, -31, -4, -16, 22, 15, 28, 15, -18, -9, -16, -2, -9, 16, 16, 11, 17, 16, 34, -14, -22, -11, -12, -31, 6, 50, 33, 13, 21, 9, 7, 2, 10, -20, 20, 5, 18, 17, 23, -10, 5, -17, -16, -39, -14, -3, -1, 22, 12, -15, -7, 21, 9, -2, 9, -9, -14, -8, 25, -23, -11, -19, 13, 9, 11, -18, 4, -28, 11, 12, 16, 12, 9, 5, 5, -20, -24, -1, 5, -2, 13, -10, 11, -14, 35, -3, -24, -10, -14, 23, 13, 12, 16, 9, 7, 1, 11, -9, 14, 16, 22, 20, 21, -4, -8, -26, -34, -32, -13, -16, 0, 20, 8, -28, -4, 17, -3, -10, 4, -13, -12, -6, 22, 1, -11, -50, 7, 4, 13, 14, 7, -14, 2, -4, 26, -9, 1, -1, 33, 22, 54, 16, 44, 22, 17, -11, 6, 12, -1, -3, 46, 1, -16, -20, 18, 10, 19, 23, -7, 16, 17, 7, 27, 21, 17, 13, 17, 4, 35, -37, -25, -27, 2, -15, 3, 11, 10, -68, 7, 8, -3, 2, 11, -15, -27, 3, 23, -17, -50, -41, 10, 14, -1, 52, -11, -25, 20, 6, 22, -18, 2, -18, 16, 31, 22, -24, 41, 35, 11, 56, 16, 28, 124, 11, 21, 56, -19, 27, -4, 13, 14, 30, -13, 15, 26, 17, 21, 16, 16, -3, 16, -10, 40, -46, -22, -13, -1, -24, 3, 6, 17, -84, 4, 13, 18, -1, 23, -19, -20, -28, 24, -16, -40, -45, 5, 20, 25, 21, -19, -25, 31, -2, 16, 3, 15, -17, 8, -26, 12, -23, 40, 44, -10, 50, -23, 46, 19, 27, 6, 41, 2, 22, 16, 10, 22, 40, -2, 1, 30, 17, 2, 34, 25, -16, 24, -4, 43, -63, -21, -23, -9, -6, -8, 19, 6, -56, 5, 16, 6, 17, 18, -2, 11, -24, 18, -26, -42, -27, 5, 11, 3, 17, -4, -10, 3, 21, 4, 22, -12, -3, 2, 10, 8, -17, 19, 37, 21, 37, 22, 13, 47, 19, 23, 11, 7, 3, 42, 13, 35, 28, -14, 23, 32, 15, 14, 35, 2, -7, 15, -18, 67, -64, -25, 10, 11, 17, 4, 28, 5, -59, 10, 1, 19, 2, 37, -6, 2, -23, 7, -19, -48, -38, -3, 10, 7, 11, 17, -55, 2, 4, 11, 20, 24, -18, 6, 15, -5, 2, -18, 30, -8, 3, 4, -12, -12, 24, -30, 34, -3, 40, -13, 6, 51, 27, -35, 11, 23, -19, -10, 31, 3, -20, 6, 3, 67, -78, -9, 16, -15, 39, -20, 25, -5, -2, 9, -12, 6, -16, 37, -27, 7, -2, 17, -17, -33, -13, -4, 9, -18, 3, 1, -32, 12, -6, 19, 7, 1, 6, -1, -6, 5, 18, 9, 42, -17, 10, 5, -11, -3, 21, -40, 29, 14, -26, -2, -2, 27, 30, -9, 10, 26, -4, -5, 43, -5, -35, -3, -14, 57, -104, -21, 19, 27, 39, -20, 19, 16, 35, 4, 11, -2, -6, 20, -36, -4, -17, -6, 32, -5, 25, 13, -18, -1, 11, -5, 16, 28, 17, 28, -13, -7, 2, -6, 22, -3, 9, -5, 21, -12, 3, 17, 6, 14, 8, -28, -22, -5, 13, 14, 30, 26, 9, -28, -1, 32, 0, 5, 51, -18, -35, -7, 13, 49, -96, -4, 5, 31, 20, -8, 52, -6, 46, -31, 5, 11, -48, 44, -20, -24, -11, -8, 26, 11, 25, 29, 12, 26, 7, 1, 41, 8, 51, -8, 12, 10, -19, -8, 58, 42, -10, 2, 26, -25, -22, -36, 9, -30, 9, -45, 2, -14, 72, 20, 
  -49, -23, -18, 42, 7, -32, 27, -36, 10, 28, -4, -16, 17, -14, 14, 37, 9, -9, -5, -25, -24, 8, 2, 15, -15, -5, 21, 9, -18, 40, 6, -26, 5, -23, -14, 12, 13, 12, -46, 5, -4, 23, 2, -9, -2, -5, 9, -10, -57, 8, 9, -26, -31, -17, -45, -18, -32, -106, -31, -5, -30, 12, -26, -15, -2, 2, 0, 9, 18, 6, 40, 1, 14, 4, -36, -27, 17, 31, 13, 19, 9, -21, -2, -22, -26, 16, -14, 5, -5, 14, 17, 0, -7, 23, 22, -19, 10, -19, 5, 1, 10, 1, 12, 4, -4, 16, 6, -7, -9, -19, -30, 12, -32, 18, 11, 14, 14, 1, 0, 17, -21, 104, -17, 21, 0, 6, -21, 2, 21, 4, 16, 17, 5, -7, 30, 4, 4, -7, -36, -38, -3, 38, 8, 7, 18, -19, -37, 23, -39, 23, 5, 18, -20, 35, -2, 11, -25, 8, -5, 4, -19, -10, 7, -5, 4, -37, 8, -11, -41, -26, -4, -33, -23, 30, -9, 5, 20, -20, 8, -18, -50, 0, 10, 7, 5, 15, -16, -13, -14, -19, -16, -33, 10, 2, 15, -31, 4, -4, 25, 9, 8, -20, -11, -15, 4, 22, -4, 2, 7, 6, -56, 14, -54, 12, -37, 9, -57, 28, -5, 8, -43, -14, -2, 14, 7, 3, 0, -3, 34, -44, -9, -11, -14, -8, -9, -18, 10, 34, -7, 8, 6, 47, 13, -53, -17, 6, 9, -17, -30, 47, 23, -11, 47, -12, -41, -30, 2, -5, 8, -21, 3, 8, 5, 20, 7, -38, -27, -32, -1, 7, 5, -32, 0, -32, -42, 22, -26, 8, 21, -3, -44, 23, 2, 3, -43, -43, -22, 13, 8, -28, 34, -2, 9, -71, 10, -67, 1, -11, -59, -28, -21, 19, 20, 10, 27, -41, 18, -52, 16, -56, 22, -17, -105, -12, -8, 2, -19, -11, 28, -6, 4, 2, 8, -18, -2, -1, 7, 16, 4, -36, -34, -60, -15, 24, 5, -13, -16, -1, -31, 31, -31, 6, 45, -13, -39, 28, -6, 1, -43, 6, -11, 11, 6, 22, 19, -9, -1, -25, 2, -38, 25, -6, -23, -29, -8, 41, -7, -23, 5, -33, -2, -24, -13, -39, 6, -24, -18, 7, 17, -30, 49, -13, -35, -29, 9, -7, -7, 3, -21, 2, 11, -1, -27, -11, -43, -51, -31, -3, 6, 4, 19, -1, -7, 19, -25, -8, 37, -7, -45, 28, -9, -10, -20, 20, -21, 5, -3, 29, 18, -2, -19, -34, -51, -9, 10, -8, -6, -14, -10, 14, 25, 5, -2, -52, 13, -12, -27, -18, -34, -16, -8, -119, -41, -54, -25, 3, 2, 5, -7, -7, -32, 6, -19, -26, -12, -21, -32, 0, -25, -53, -16, -24, 11, 1, 2, 4, 27, -24, -17, -16, 33, -8, -14, -7, 2, 2, 0, 27, 13, -29, 17, 50, 20, -3, -37, -20, -25, -1, 40, -4, 18, 4, -10, -28, -23, 1, -3, 11, 4, -31, 21, -15, -21, 0, -28, 17, 2, -39, -1, 12, -14, -44, -38, 26, -33, 9, -2, -10, -33, -9, 5, -7, -5, -49, 8, -29, 5, 12, 16, 16, 8, -37, -2, -35, 8, 28, -32, -24, 14, -26, 15, 24, 14, -8, -5, 53, 10, 7, -15, 25, 5, 14, 30, 18, -6, 23, -19, -30, -6, -2, -23, -85, -28, 13, 13, -127, -26, -44, -74, -36, -24, -40, -1, 6, 12, -14, -57, -3, -51, 10, -21, -18, -55, -33, -4, 4, -19, -25, -2, -64, 9, 17, -10, -19, 1, -36, 10, -20, 33, 14, -42, -51, 15, -36, 4, 27, -5, -22, 6, 8, 20, 3, -13, 4, 2, -7, 44, -8, 2, 2, -25, -18, -2, -11, -18, -18, 14, 3, -37, -55, 10, -17, 10, -18, -30, 0, -38, 0, -12, -11, -38, -32, -34, 27, -7, -26, 3, -43, -8, 11, -8, -5, -13, -50, 16, 17, -30, 15, 5, -33, 24, 19, 1, -5, 12, -18, 15, -24, 4, 35, 4, -13, 16, 47, -1, -5, -2, 19, -10, 7, 41, -7, 31, 4, 8, -5, -10, -9, -14, -29, -1, 0, -53, -14, 0, 22, -2, -2, 5, 6, -19, 2, -14, 2, -11, -13, -24, 24, -18, -5, -30, -20, -38, 17, 11, -4, -21, -47, 15, 12, 17, -21, -9, -13, 8, -15, 20, 6, 18, -5, 24, -39, 20, 24, 3, -10, -17, 25, -13, 4, 12, 35, -29, 24, -26, -26, -3, -9, -9, -12, 17, -11, -17, -44, 28, -30, -5, -76, 4, 13, -18, -59, -17, -12, -4, -11, -23, -12, -33, -44, -6, 27, 5, 2, -77, -15, -37, 10, -8, -26, -1, -27, 15, 2, 0, -53, 11, -51, -39, 3, -41, 19, 26, -15, 29, -18, 9, 37, 15, -49, -36, -4, 21, -16, -39, -20, -13, 8, -17, 7, -5, -37, 28, -26, 10, 4, -24, 15, 47, -33, -4, 63, -20, 0, 9, -40, -62, -67, -48, -10, -6, -38, 
  22, 11, 2, 8, -20, -20, -2, -24, -9, -13, -8, -22, -20, -7, 2, -14, 5, -30, -16, 24, -21, -15, -55, -15, -37, 5, -5, -3, -24, -31, 4, 7, -17, 11, -6, 7, -20, -21, -13, -35, -6, -32, -48, -1, 0, -3, -11, -8, -9, -42, -1, 26, 61, 39, -32, 30, 37, 81, 7, 1, 34, 8, 31, -20, -26, -18, -34, 20, -38, -15, 1, -26, -8, -5, -34, -45, -30, -15, 17, 6, 4, -7, -20, 32, -17, -18, -48, -7, -16, -9, -4, 2, 13, -9, 2, 13, -19, -27, -11, -6, -19, 6, -3, 0, -7, -20, -23, -2, -3, 4, 14, -5, 32, -44, -26, 6, -21, -43, -26, -35, -23, -63, -3, 31, -4, -3, 13, 11, -60, 9, -23, 17, -29, 0, 2, -39, 10, -16, -25, -9, -17, -12, 10, 1, 19, 21, -37, -7, 14, -19, -50, -1, 11, -30, 1, -3, 47, 1, 23, -17, -29, -28, -5, -1, -6, 64, -15, 29, -13, 3, -10, 12, -23, 10, -2, 1, -9, -36, -8, 2, -7, 47, 2, -12, -58, 0, -7, 25, -1, 10, -5, -10, 2, -4, -10, 21, -21, 1, 24, -50, 3, 3, -14, -18, -1, 11, 18, 10, 34, 0, 25, -25, 15, -20, 34, 5, -14, -13, 11, 5, 34, 13, -16, -27, 10, 19, 10, -2, -34, 16, -11, 25, 17, -15, 8, 2, -27, 3, 2, -1, -18, -48, -17, 35, 40, 2, 8, 10, -22, -16, 20, 17, -3, 3, -6, -13, -1, 5, -11, -3, -14, -11, 22, -43, -1, -7, -7, -17, 1, -4, 6, 26, 44, 5, 23, -42, 21, -25, 6, 14, -21, -41, 13, 2, 42, 14, 20, -25, 11, 0, 1, -28, -13, 28, 23, 42, 33, 1, 32, 14, 26, -12, 1, -12, -13, -13, 16, -16, 6, 12, 3, 8, 40, -22, 8, 6, 8, 16, -13, -21, -16, 12, -3, -6, -4, -1, 17, -27, -8, -8, -19, -7, 18, -12, -3, 21, 37, -8, 23, -38, 17, -23, 5, 0, 16, -26, 14, -1, 39, 18, -18, -35, -8, -10, 27, 6, -14, 19, -4, 32, 3, 10, 16, -1, 14, -36, 5, -1, -28, -9, 7, -40, 10, -11, -16, 28, -8, -62, -24, -20, -31, 32, 1, 13, -12, 13, -5, 11, -18, -5, 5, -24, 9, -15, -5, 4, 14, -39, 2, 7, 20, -20, 26, -32, 15, -8, 36, -16, 14, -34, 13, -1, 40, 6, 7, -30, 22, 1, 16, -6, 3, 22, -1, 36, -5, -11, 4, 1, 26, -40, -23, 1, -43, -2, 34, 10, -4, 3, -35, 11, -33, -63, 9, -18, -21, -2, -42, 25, -30, 10, -24, -4, 5, 8, -30, -5, 0, -28, 0, -7, 5, -25, 9, 14, 21, -23, 8, 5, 21, -17, 40, -17, 0, -13, 5, -10, 4, -6, 21, -17, -20, -16, 21, -2, -1, 1, -23, 8, 17, -20, -12, -18, -9, 13, 8, 0, 4, -55, 4, -23, -57, -25, -40, 1, -31, -30, -34, -44, -42, -17, -31, -1, -1, -29, -22, -4, -17, -24, -5, -9, -37, -28, 14, -10, -18, -25, 21, 2, 18, -5, 11, 16, 1, -1, 66, -24, -3, -4, -23, -14, -10, -20, 14, -7, 20, -17, 0, 0, -18, -1, -40, 4, 0, -18, -25, -22, 0, 8, -16, -7, -1, -19, 6, -8, -64, -70, -14, -13, -53, -42, 18, 11, -12, -17, -1, -11, -13, -52, 9, 6, -13, -14, 14, 1, -7, -10, 9, -3, 13, -22, 17, -19, -1, -19, -28, 18, -32, 15, 15, -20, 3, 2, -16, -19, 3, -27, 2, 5, 3, -4, 10, -5, -6, -6, 10, -8, 17, -1, 1, 0, -11, 6, 16, 0, -3, 9, -35, 16, -4, 40, -18, 24, 15, 20, -5, 12, -5, -7, -21, 25, -13, -41, -18, -3, -30, -21, 20, 3, -14, -10, 4, -7, -12, -28, 12, -5, 3, 16, -27, 30, -43, -14, -1, -15, -26, 2, -20, -15, 11, -22, 10, -6, -8, -37, 5, 0, -13, -9, -8, 9, -38, -2, -18, -27, -34, 4, 1, 1, -18, 28, -7, -1, -26, 26, -8, -12, -13, -5, -8, 18, -16, -9, 33, 3, -33, -12, -26, 6, -8, -13, -2, -9, -6, -2, -6, -4, 5, -24, 19, 12, -28, -27, -28, 17, -19, -4, -28, -15, -6, 2, -25, -10, 4, -13, 7, 5, -24, -29, -14, -13, 6, -22, 14, 0, -6, 4, -3, -21, 17, 11, 15, 5, -1, -11, -12, 23, -53, 28, 3, -28, -59, -3, -18, 7, -6, -7, 10, 12, -6, -40, -27, 9, -27, -53, -13, -32, -40, 12, -17, -25, -21, -25, 35, 4, -31, 13, -30, 16, -42, -29, -46, 8, -39, -13, -13, -14, -18, -4, -23, 10, -30, -28, -38, -8, -3, -34, -15, -7, -9, -10, -68, 7, -53, -2, -8, 3, -36, -72, -35, 3, -32, 17, 7, -13, 0, 52, -23, 40, 12, 10, 17, 0, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 4,832 } };
const TfArray<1, float> quant6_scale = { 1, { 0.013901052065193653, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[8*3*3*1] = { 
  /* [0][0][][] */ -72, 58, 89, 
  /* [0][1][][] */ -127, 104, 81, 
  /* [0][2][][] */ -101, 95, 113, 
  /* [1][0][][] */ 127, -113, -11, 
  /* [1][1][][] */ 7, -70, -24, 
  /* [1][2][][] */ 28, -70, -82, 
  /* [2][0][][] */ 32, -104, 60, 
  /* [2][1][][] */ 79, -119, 63, 
  /* [2][2][][] */ 127, -79, 8, 
  /* [3][0][][] */ 74, 92, -23, 
  /* [3][1][][] */ 84, 127, -25, 
  /* [3][2][][] */ 119, 77, 0, 
  /* [4][0][][] */ 119, 83, -127, 
  /* [4][1][][] */ 120, 10, -115, 
  /* [4][2][][] */ 120, 33, -115, 
  /* [5][0][][] */ -63, -21, 21, 
  /* [5][1][][] */ -13, -127, -32, 
  /* [5][2][][] */ -85, -75, 34, 
  /* [6][0][][] */ -103, -8, -82, 
  /* [6][1][][] */ -39, -66, -1, 
  /* [6][2][][] */ -15, -127, 20, 
  /* [7][0][][] */ 18, -89, 27, 
  /* [7][1][][] */ -65, 127, -76, 
  /* [7][2][][] */ -23, 26, -14, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant7_scale = { 8, { 0.0015929639339447021, 0.0018190059345215559, 0.001698408043012023, 0.0011754797305911779, 0.0015827248571440578, 0.0014395940816029906, 0.0022205077111721039, 0.002911795862019062, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[16*3*3*8] = { 
  /* [0][0][][] */ -24,-88,-40,0,-20,-14,-57,-57, 10,-63,25,4,-98,-63,-91,-49, -21,17,6,26,17,-36,-43,0, 
  /* [0][1][][] */ 20,-53,-97,25,6,-50,-89,-54, 25,-46,-11,21,-21,-87,-62,15, -62,1,-16,3,-3,-87,-65,1, 
  /* [0][2][][] */ 44,-103,-86,33,35,-127,-99,-81, 18,1,39,-3,-65,0,-73,-15, -2,-49,45,28,-40,-86,-93,28, 
  /* [1][0][][] */ 2,-59,-19,0,-57,-116,-120,-104, 17,-55,-24,31,-10,-74,-83,-30, -124,38,27,14,34,14,13,-34, 
  /* [1][1][][] */ -3,-120,-91,22,-93,-58,-82,-70, 28,-37,-26,21,58,-127,-122,-29, -80,22,29,4,19,23,7,-1, 
  /* [1][2][][] */ -16,-75,-114,17,-68,-53,-41,-64, 1,-35,-25,37,-12,-50,-41,-26, 16,11,11,-30,73,22,11,-24, 
  /* [2][0][][] */ -18,-14,-1,-15,34,-16,-67,-99, 27,-110,-102,32,10,-46,-77,-33, 12,6,20,-21,-12,-17,-2,-36, 
  /* [2][1][][] */ -107,-5,-2,-28,17,-5,-76,-80, -2,-92,-93,5,43,-114,-62,-95, -20,13,14,18,13,4,6,13, 
  /* [2][2][][] */ -57,-105,-41,-51,-87,-33,-101,-92, 51,-49,-64,43,-38,-104,-127,-39, 20,7,6,-15,2,-8,-19,-10, 
  /* [3][0][][] */ -61,-31,-47,-45,-12,-7,-10,-68, -35,62,19,-60,22,8,39,12, -13,-32,-44,-64,-89,-9,9,4, 
  /* [3][1][][] */ -101,21,-21,-1,16,-9,-19,-37, -88,2,-11,-97,-59,31,10,12, -9,-12,-61,-97,-109,14,17,23, 
  /* [3][2][][] */ -105,-1,-44,-9,-2,-33,-40,-7, -127,19,-11,-94,-61,4,9,-2, -7,20,-8,-108,-72,-12,23,12, 
  /* [4][0][][] */ -48,52,47,63,17,42,25,15, 72,40,6,17,23,23,5,87, 127,-107,-19,5,-15,-33,-66,45, 
  /* [4][1][][] */ -78,40,-7,19,110,27,61,-75, 68,-48,-59,-7,25,-35,-18,15, 90,12,28,-3,44,-108,-57,8, 
  /* [4][2][][] */ -40,51,80,52,46,52,3,-14, 114,-29,-60,48,56,-43,-35,-59, 8,-14,34,-11,-9,-44,-79,34, 
  /* [5][0][][] */ 39,4,14,32,23,16,7,-14, -116,25,21,-1,53,13,23,-19, 41,26,5,-31,33,14,9,-1, 
  /* [5][1][][] */ 6,-15,41,25,-23,-62,-4,-70, -58,14,-22,20,20,-3,16,1, 24,-2,8,-97,16,17,22,-52, 
  /* [5][2][][] */ 7,-34,13,42,16,-95,-127,-17, -11,13,-8,40,14,-32,26,-16, 64,17,34,-79,10,26,9,-48, 
  /* [6][0][][] */ 40,-51,-112,5,-34,-4,-38,-34, 6,-1,-13,-115,-114,-11,-39,-30, -4,-85,-80,9,-4,-69,-26,-61, 
  /* [6][1][][] */ 29,-127,-54,25,-14,-29,-42,-60, -3,-35,32,-76,-71,-59,-47,-16, 4,-73,-75,36,0,-89,-98,-13, 
  /* [6][2][][] */ 6,-12,-1,-13,-72,-63,-125,-56, 5,-90,22,-5,-31,-64,-112,-20, 34,-75,-73,-16,54,-77,-91,-20, 
  /* [7][0][][] */ 17,-55,83,42,-106,-33,-16,28, -106,3,39,36,9,-75,-81,-10, 31,8,38,-56,8,30,15,-2, 
  /* [7][1][][] */ 30,28,20,-11,-62,-33,-8,21, -127,33,37,20,26,-94,-91,26, 25,19,-4,-99,-65,20,20,27, 
  /* [7][2][][] */ 1,32,73,36,-64,-56,-55,-26, -37,-19,-56,48,-6,-109,-111,-5, 67,-13,30,-119,-57,17,13,-52, 
  /* [8][0][][] */ 11,33,24,-40,33,-4,-35,-26, 14,-26,-11,-7,56,-69,-65,-57, 4,10,43,24,23,20,-16,-23, 
  /* [8][1][][] */ 6,-8,9,6,22,-22,-18,-61, 27,-68,-112,19,-5,-90,-126,-51, 26,38,32,-5,8,11,23,9, 
  /* [8][2][][] */ 39,-127,7,9,2,-24,-23,-51, 29,-54,-47,23,84,-74,-35,-38, 1,5,29,-25,25,-1,12,-23, 
  /* [9][0][][] */ 35,-125,-7,12,35,-102,-127,-58, -110,8,25,-47,11,28,-8,-20, 63,33,35,-33,-94,22,29,-15, 
  /* [9][1][][] */ -67,5,-1,0,14,-101,-75,-67, -74,31,6,-26,-3,-9,-22,-16, -19,19,12,-101,-114,21,9,-41, 
  /* [9][2][][] */ -84,18,12,53,3,-70,-42,-75, -80,-13,-37,-10,-26,17,18,-20, -11,59,46,-120,-45,16,31,-6, 
  /* [10][0][][] */ 4,-102,-40,-3,58,-13,-71,-44, 3,34,89,2,-36,-38,-44,-21, -26,-26,-29,-23,23,-10,-33,-42, 
  /* [10][1][][] */ -10,-21,62,32,16,-66,-24,-4, -70,22,10,-21,-93,-15,-65,-5, -30,-66,-43,7,-81,-40,-63,16, 
  /* [10][2][][] */ -8,14,38,6,75,1,-15,25, -46,-16,27,-127,-94,-16,-30,-3, 16,8,74,-7,-81,-8,-45,19, 
  /* [11][0][][] */ -17,53,2,66,-12,-48,-18,-19, 21,15,34,-98,-24,37,14,20, 27,-29,-46,3,12,-1,14,19, 
  /* [11][1][][] */ -11,13,-13,-14,127,-63,-65,47, -23,-4,-10,-18,-32,10,22,40, 1,35,-21,22,5,4,10,6, 
  /* [11][2][][] */ 67,44,-19,73,23,-83,-44,1, -7,-2,32,-12,-10,22,13,36, -15,15,71,14,4,6,4,41, 
  /* [12][0][][] */ 43,-86,-47,53,-6,-127,-123,-44, -79,19,37,-21,-8,-39,-38,-49, 24,-65,-5,23,-45,-54,-52,10, 
  /* [12][1][][] */ -18,18,22,14,-9,-13,-14,-37, -93,-1,-6,-22,3,-17,-16,-2, 54,-108,16,-2,-37,-6,-24,0, 
  /* [12][2][][] */ -108,16,28,-26,9,5,34,-20, 33,-119,-48,-5,3,-11,-31,10, 23,-17,58,-27,-33,-68,-93,-21, 
  /* [13][0][][] */ -27,-29,-77,-81,-87,40,19,-73, -18,-44,19,-13,-127,-13,-29,-23, 7,10,0,14,23,-72,-71,-20, 
  /* [13][1][][] */ 19,-29,-80,-99,-78,6,28,-79, -6,-79,33,6,-48,-31,-70,-38, 10,-20,-39,-9,23,-75,-108,1, 
  /* [13][2][][] */ 3,-9,-92,-36,-84,27,4,-91, 27,-103,-24,0,-41,-12,5,-6, 12,-97,-22,14,15,-96,-62,-20, 
  /* [14][0][][] */ -110,-61,-74,-64,-127,-42,-84,-1, -29,44,29,-1,-12,-24,-13,66, -71,-1,-72,-20,-103,14,2,15, 
  /* [14][1][][] */ -23,-85,-92,-85,-97,-103,-37,2, -29,19,-11,20,-93,-44,-53,34, -63,-15,-80,5,-82,8,2,-50, 
  /* [14][2][][] */ -116,-107,-11,-106,-4,-63,-107,-43, -38,35,48,-9,-74,-33,-55,39, 7,-67,-120,4,-90,10,-13,-37, 
  /* [15][0][][] */ -21,8,66,-15,-41,9,9,58, -9,-1,22,-17,46,22,35,-43, 29,-49,8,-15,-14,36,-13,59, 
  /* [15][1][][] */ -35,-3,-17,-18,-32,-20,-6,57, 3,52,-7,-101,48,25,31,-43, 14,-57,-41,2,3,5,-52,31, 
  /* [15][2][][] */ -124,14,-5,-103,-87,-21,30,46, -16,44,-25,-127,-37,7,-14,-5, 22,-68,-121,11,23,16,26,-8, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,3,3,8 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0068895742297172546, 0.0064348210580646992, 0.0062113716267049313, 0.0063174962997436523, 0.0039209439419209957, 0.0075428145937621593, 0.007272704504430294, 0.0055256611667573452, 0.0068394523113965988, 0.0062564322724938393, 0.0055947024375200272, 0.0059311003424227238, 0.0077783972956240177, 0.0069474535994231701, 0.0061936434358358383, 0.005437562707811594, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<4, int> tensor_dimension9 = { 4, { 1,50,13,1 } };
const TfArray<1, float> quant9_scale = { 1, { 0.043461676687002182, } };
const TfArray<1, int> quant9_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,50,13,8 } };
const TfArray<1, float> quant10_scale = { 1, { 0.012827097438275814, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,25,7,8 } };
const TfArray<1, float> quant11_scale = { 1, { 0.012827097438275814, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,25,7,16 } };
const TfArray<1, float> quant12_scale = { 1, { 0.018209327012300491, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,13,4,16 } };
const TfArray<1, float> quant13_scale = { 1, { 0.018209327012300491, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,832 } };
const TfArray<1, float> quant14_scale = { 1, { 0.018209327012300491, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<2, int> tensor_dimension15 = { 2, { 1,4 } };
const TfArray<1, float> quant15_scale = { 1, { 0.14635714888572693, } };
const TfArray<1, int> quant15_zero = { 1, { 22 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<2, int> tensor_dimension16 = { 2, { 1,4 } };
const TfArray<1, float> quant16_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,2 } };
const TfArray<1, int> outputs0 = { 1, { 9 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 9,7,3 } };
const TfArray<1, int> outputs1 = { 1, { 10 } };
const TfLitePoolParams opdata2 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs2 = { 1, { 10 } };
const TfArray<1, int> outputs2 = { 1, { 11 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 11,8,4 } };
const TfArray<1, int> outputs3 = { 1, { 12 } };
const TfLitePoolParams opdata4 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs4 = { 1, { 12 } };
const TfArray<1, int> outputs4 = { 1, { 13 } };
const TfLiteReshapeParams opdata5 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs5 = { 2, { 13,1 } };
const TfArray<1, int> outputs5 = { 1, { 14 } };
const TfLiteFullyConnectedParams opdata6 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs6 = { 3, { 14,6,5 } };
const TfArray<1, int> outputs6 = { 1, { 15 } };
const TfLiteSoftmaxParams opdata7 = { 1 };
const TfArray<1, int> inputs7 = { 1, { 15 } };
const TfArray<1, int> outputs7 = { 1, { 16 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 3328, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 5200, (TfLiteIntArray*)&tensor_dimension9, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 5200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 5200, (TfLiteIntArray*)&tensor_dimension11, 1400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 2800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2800, (TfLiteIntArray*)&tensor_dimension13, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 832, (TfLiteIntArray*)&tensor_dimension15, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 17;
  for(size_t i = 0; i < 17; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 8; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 8; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  16, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 8; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
